accuracyaverage = mean(accuracy)
accuracyaverage
precision=diag/colsums
precision
recall=diag/rowsums
recall
precision
precisionaverage = mean(precision)
precisionaverage
recall
recallaverage = mean(recall)
recallaverage
plot(data$class,data$age, col=c(28,32))
#    # Create model and save in a separate file
# svm_model<- svm(class ~., data = data)
# svm_model
#
# save(svm.r, file="svm.r")
colsums=apply(m,2,sum)
p=rowsums
q=colsums
accuracy=sum(diag)/n
accuracy
accuracyaverage = mean(accuracy)
accuracyaverage
precision=diag/colsums
precision
recall=diag/rowsums
recall
precision
precisionaverage = mean(precision)
precisionaverage
recall
recallaverage = mean(recall)
recallaverage
plot(data$class,data$age, col=c(28,32))
#    # Create model and save in a separate file
# svm_model<- svm(class ~., data = data)
# svm_model
#
# save(svm.r, file="svm.r")
shiny::runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
heroku create --stack=container
install.packages("dockerfiler")
install.packages("docker")
library(docker)
library(dockerfiler)
shiny::runApp('C:/Users/yuany/Desktop/test')
runApp('C:/Users/yuany/Desktop/test')
heroku run R
shiny::runApp('C:/Users/yuany/Desktop/login2')
install.packages("shiny")
install.packages("shiny")
shiny::runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
#### Log in module ###
PASSWORD <- data.frame(
Brukernavn = c("ray","gil"),
Passord = c("0000","1234")
)
output$uiLogin <- renderUI({
if (USER$Logged == FALSE) {
wellPanel(
textInput("userName", "User Name:"),
passwordInput("passwd", "Pass word:"),
br(),
actionButton("Login", "Log in")
)
}
})
output$pass <- renderText({
if (USER$Logged == FALSE) {
USER$pass
}
})
# Login info during session ----
output$userPanel <- renderUI({
if (USER$Logged == TRUE) {
fluidRow(
column(2,
"User: ", USER$name
),
column(1, actionLink("logout", "Logout"))
)
}
})
# control login
observeEvent(input$Login , {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(PASSWORD$Brukernavn == Username)
Id.password <- which(PASSWORD$Passord    == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
USER$name <- Username
}
} else {
USER$pass <- "User name or password failed!"
}
})
# control logout
observeEvent(input$logout , {
USER$Logged <- FALSE
USER$pass <- ""
})
runApp('C:/Users/yuany/Desktop/login2')
if (USER$Logged == FALSE) {
wellPanel(
textInput("userName", "User Name:"),
passwordInput("passwd", "Pass word:"),
br(),
actionButton("Login", "Log in")
)
}
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
fluidRow(
column(3,
output$page <- renderUI({svm })
),
column(2,
"User: ", USER$name
),
column(1, actionLink("logout", "Logout"))
)
fluidRow(
column(3,
renderUI({svm })
),
column(2,
"User: ", USER$name
),
column(1, actionLink("logout", "Logout"))
)
if (USER$Logged == TRUE) {
fluidRow(
column(3,
renderUI({svm })
),
column(2,
"User: ", USER$name
),
column(1, actionLink("logout", "Logout"))
)
}
fluidRow(
column(3,
renderText({"Hello World" })
),
column(2,
"User: ", USER$name
),
column(1, actionLink("logout", "Logout"))
)
fluidRow(
column(2,
"User: ", USER$name
),
column(1, actionLink("logout", "Logout"))
),
column(3,
renderText({"Hello World" })
)
fluidRow(
column(2,
"User: ", USER$name
),
column(1, actionLink("logout", "Logout"))
)
}
# control login
observeEvent(input$Login , {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(PASSWORD$Brukernavn == Username)
Id.password <- which(PASSWORD$Passord    == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
USER$name <- Username
}
} else {
USER$pass <- "User name or password failed!"
}
})
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login2')
runApp('C:/Users/yuany/Desktop/login3')
install.packages("shinydashboard")
runApp('C:/Users/yuany/Desktop/login3')
runApp('C:/Users/yuany/Desktop/login3')
runApp('C:/Users/yuany/Desktop/login3')
list_field_user = list( h1("well done"))
runApp('C:/Users/yuany/Desktop/login3')
shiny::runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
server <- function(input, output, session) {
observeEvent(input$switchtab, {
newtab <- switch(input$tabs,
"dashboard" = "widgets",
"widgets" = "dashboard"
)
updateTabItems(session, "tabs", newtab)
})
}
runApp('C:/Users/yuany/Desktop/shinyLast')
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
View(server)
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
# Define UI ----
ui<-fluidPage(
# App title ----
titlePanel("SVM Classifier"),
#test now
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a dataset ----
selectInput("var1", "Choose the first variable:",
choices=c("age",
"sex",
"cp",
"chol",
"fbs",
"exang",
"thalach",
"restecg",
"oldpeak",
"trestbps",
"class"),
selected ="age"),
selectInput("var2", "Choose the second variable:",
choices=c("age",
"sex",
"cp",
"chol",
"fbs",
"exang",
"thalach",
"restecg",
"oldpeak",
"trestbps",
"class"),
selected ="cp"),
# Input: Specify the number of observations to view ----
# numericInput("obs", "Number of observations to view:", 10),
# Include clarifying text ----
helpText("Note: Please select a different variable.")
# Input: actionButton() to defer the rendering of output ----
# until the user explicitly clicks the button (rather than
# doing it immediately when inputs change). This is useful if
# the computations required to render output are inordinately
# time-consuming.
# actionButton("update", "Update View")
),
mainPanel(
titlePanel( textOutput(outputId="title")),
#textOutput("selected_var1"),
# textOutput("selected_var2"),
plotOutput(outputId="img"),
hr(),
useShinyalert()
# actionButton("go", "Go")
)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
library(shinyalert)
install.packages("shiny")
install.packages("shinyalert")
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
install.packages("e1071")
runApp('C:/Users/yuany/Desktop/shinyLast')
install.packages("e1071")
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
library(shinydashboard)
library(e1071)
library(e1071)
library(shiny)
library(shinyalert)
library(e1071)
install.packages("e1071")
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
runApp('C:/Users/yuany/Desktop/shinyLast')
install.packages(c("ISLR", "e1071"))
runApp('C:/Users/yuany/Desktop/shinyLast')
install.packages(c("ISLR", "e1071"))
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
),
# mainPanel(
titlePanel( textOutput(outputId="title")),
#textOutput("selected_var1"),
# textOutput("selected_var2"),
plotOutput(outputId="img"),
hr(),
useShinyalert()
# actionButton("go", "Go")
# )
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
shiny::runApp('C:/Users/yuany/Desktop/Shiny')
runApp('C:/Users/yuany/Desktop/Shiny')
runApp('C:/Users/yuany/Desktop/Shiny')
runApp('C:/Users/yuany/Desktop/Shiny')
runApp('C:/Users/yuany/Desktop/Shiny')
runApp('C:/Users/yuany/Desktop/Shiny')
cleveland <- read.csv("datasets/processed.cleveland.csv",header=T)
switzerland<- read.csv("./datasets/processed.switzerland.csv",header=T)
va <- read.csv("../datasets/processed.va.csv",header=T)
data$thal<-NULL
data$class[data$class>1]<-"1"
data$class[data$class>=1]<-"1"
data$class[as.numeric(data$class>=1)]<-"1"
data$class[as.numeric(data$class>1)]<-"1"
data$class<-as.numeric(data$class)
data$class[(data$class>1)]<-"1"
#find ? elements
idx<-data =="?"
#replace elements with NA
is.na(data) <- idx
for(i in 1:ncol(data)){ #for every column of our data
data[is.na(data[,i]), i] <- mean(as.numeric(data[,i]), na.rm =TRUE)
#replace every missing values with the mean of that column
}
data[] <- lapply(data, as.factor)
library(e1071)
#split dataset
set.seed(3233)
train =sample(nrow(data), nrow(data)*2/3)
test=-train
data_test=data[test,]
data_train=data[train,]
#generit Matrix table
svm.data <- svm(data_train$class ~., data_train, kernel ="linear", cost=.1,
preprocess=c("center","scale"), metric="ROC",scale=FALSE)
prediction <- predict(svm.data, data_test, type = 'class')
summary(svm.data)
m<- table(prediction, data_test$class)
print(m)
n=sum(m)
nc=nrow(m)
diag=diag(m)
rowsums=apply(m,1,sum)
colsums=apply(m,2,sum)
p=rowsums
q=colsums
accuracy=sum(diag)/n
accuracy
accuracyaverage = mean(accuracy)
accuracyaverage
precision=diag/colsums
precision
recall=diag/rowsums
recall
recall
recallaverage = mean(recall)
recallaverage
plot(data$class,data$age, col=c(28,32))
runApp('C:/Users/yuany/Desktop/Shiny')
runApp('C:/Users/yuany/Desktop/Shiny')
data$thal<-NULL
data$class[data$class>1]<-"1"
data$calss<-as.numeric(data$class)
data$class[data$class>1]<-"1"
data$calss<-as.factors(data$class)
data$class[data$class>1]<-"1"
data$class[data$class>"1"]<-"1"
cleveland <- read.csv("https://github.com/Lvby/Shiny/blob/gh-pages/datasets/processed.cleveland.csv",header=T)
hungarian <- read.csv("https://github.com/Lvby/Shiny/blob/gh-pages/datasets/processed.hungarian.csv",header=T)
va <- read.csv("https://github.com/Lvby/Shiny/blob/gh-pages/datasets/processed.hungarian.csv",header=T)
switzerland<- read.csv("https://github.com/Lvby/Shiny/blob/gh-pages/datasets/processed.va.csv",header=T)
#find ? elements
idx<-data =="?"
install.packages(c('ISLR', 'e1071'))
library(e1071)
library(ISLR)
install.packages(c("ISLR", "e1071"))
cleveland <- read.csv("datasets/processed.cleveland.csv",header=T)
hungarian <- read.csv("datasets/processed.hungarian.csv",header=T)
va <- read.csv("datasets/processed.va.csv",header=T)
switzerland<- read.csv("datasets/processed.switzerland.csv",header=T)
setwd("C:/Users/yuany/Desktop/Shiny")
cleveland <- read.csv("datasets/processed.cleveland.csv",header=T)
hungarian <- read.csv("datasets/processed.hungarian.csv",header=T)
va <- read.csv("datasets/processed.va.csv",header=T)
switzerland<- read.csv("datasets/processed.switzerland.csv",header=T)
data<-rbind(cleveland,hungarian,va,switzerland)
data$slope<-NULL
data$ca<-NULL
data$thal<-NULL
data$class[data$class>1]<-"1"
#find ? elements
idx<-data =="?"
#replace elements with NA
is.na(data) <- idx
for(i in 1:ncol(data)){ #for every column of our data
data[is.na(data[,i]), i] <- mean(as.numeric(data[,i]), na.rm =TRUE)
#replace every missing values with the mean of that column
}
data[] <- lapply(data, as.factor)
library(e1071)
#split dataset
set.seed(3233)
train =sample(nrow(data), nrow(data)*2/3)
test=-train
data_test=data[test,]
data_train=data[train,]
#generit Matrix table
svm.data <- svm(data_train$class ~., data_train, kernel ="linear", cost=.1,
preprocess=c("center","scale"), metric="ROC",scale=FALSE)
prediction <- predict(svm.data, data_test, type = 'class')
summary(svm.data)
m<- table(prediction, data_test$class)
print(m)
n=sum(m)
nc=nrow(m)
diag=diag(m)
rowsums=apply(m,1,sum)
colsums=apply(m,2,sum)
p=rowsums
q=colsums
accuracy=sum(diag)/n
accuracy
accuracyaverage = mean(accuracy)
accuracyaverage
precision=diag/colsums
precision
recall=diag/rowsums
recall
recall
recallaverage = mean(recall)
recallaverage
plot(data$class,data$age, col=c(28,32))
#    # Create model and save in a separate file
# svm_model<- svm(class ~., data = data)
# svm_model
#
# save(svm.r, file="svm.r")
runApp()
runApp()
